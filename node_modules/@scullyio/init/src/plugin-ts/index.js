"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../utils/utils");
exports.default = (options) => {
    return schematics_1.chain([addTsConfig(options), addPlugin(options), updateScullyConfig(options)]);
};
const addTsConfig = (options) => (tree, context) => {
    return tree.create('scully/tsconfig.json', `
{
  "compileOnSave": false,
  "compilerOptions": {
    "esModuleInterop": true,
    "importHelpers": false,
    "lib": ["ES2019", "dom"],
    "module": "commonjs",
    "moduleResolution": "node",
    "sourceMap": true,
    "target": "es2018",
    "types": ["node"],
    "skipLibCheck": true,
    "skipDefaultLibCheck": true,
    "typeRoots": ["../node_modules/@types"],
    "allowSyntheticDefaultImports": true
  },
  "exclude": ["./**/*spec.ts"]
}
`);
};
const addPlugin = (options) => (tree, context) => {
    return tree.create('scully/plugins/plugin.ts', `
import { registerPlugin, getPluginConfig } from '@scullyio/scully';

export const myPlugin = 'myPlugin';

const myFunctionPlugin = async (html: string): Promise<string> => {
  return html;
};

const validator = async () => [];

registerPlugin('postProcessByHtml', myPlugin, myFunctionPlugin, validator);
`);
};
const updateScullyConfig = (options) => (tree, context) => {
    const scullyConfigFile = utils_1.getScullyConfig(tree, options.project);
    const scullyJs = utils_1.getFileContents(tree, scullyConfigFile);
    if (!scullyJs) {
        context.logger.error(`No scully configuration file found ${scullyConfigFile}`);
    }
    // const newScullyJs = addTypescriptFolder(scullyJs, `pluginDir: './scully/plugins/'`);
    // tree.overwrite(scullyConfigFile, newScullyJs);
    // context.logger.info(`✅️ Update ${scullyConfigFile}`);
};
//# sourceMappingURL=index.js.map