"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../utils/utils");
const tasks_1 = require("@angular-devkit/schematics/tasks");
let angularJSON = 'angular.json';
exports.default = (options) => {
    return schematics_1.chain([verifyAngularWorkspace(), modifyPackageJson(options), createScullyConfig(options)]);
};
const verifyAngularWorkspace = () => (tree, context) => {
    let workspaceConfigBuffer;
    workspaceConfigBuffer = tree.read(angularJSON);
    if (!workspaceConfigBuffer) {
        angularJSON = 'workspace.json';
        workspaceConfigBuffer = tree.read(angularJSON);
    }
    if (!workspaceConfigBuffer) {
        throw new schematics_1.SchematicsException('Not an angular CLI workspace');
    }
};
const modifyPackageJson = (options) => (tree, context) => {
    let defaultProjectName, projectName;
    defaultProjectName = utils_1.getProject(tree, 'defaultProject', angularJSON);
    projectName = utils_1.getProject(tree, options.project, angularJSON);
    const params = projectName === defaultProjectName ? '' : ` --project ${projectName}`;
    const jsonContent = utils_1.getPackageJson(tree);
    jsonContent.scripts.scully = 'npm scully --' + params;
    jsonContent.scripts['scully:serve'] = 'npx scully serve --' + params;
    utils_1.overwritePackageJson(tree, jsonContent);
    context.logger.info('✅️ Update package.json');
};
const createScullyConfig = (options) => (tree, context) => {
    const scullyConfigFile = `scully.${utils_1.getProject(tree, options.project, angularJSON)}.config.ts`;
    if (!utils_1.checkProjectExist(tree, utils_1.getProject(tree, options.project, angularJSON), angularJSON)) {
        throw new schematics_1.SchematicsException(`There is no ${options.project} project in angular.json`);
    }
    if (!tree.exists(scullyConfigFile)) {
        const srcFolder = utils_1.getSrc(tree, options.project, angularJSON);
        const projectName = utils_1.getProject(tree, options.project, angularJSON);
        tree.create(scullyConfigFile, `import { ScullyConfig } from '@scullyio/scully';
export const config: ScullyConfig = {
  projectRoot: "./${srcFolder}",
  projectName: "${projectName}",
  outDir: './dist/static',
  routes: {
  }
};`);
        context.logger.info(`✅️ Created scully configuration file in ${scullyConfigFile}`);
        return addPluginTS(projectName, options);
    }
};
const addPluginTS = (project, options) => (tree, context) => {
    const nextRules = [];
    if (options.pluginTS) {
        nextRules.push((host, ctx) => {
            ctx.addTask(new tasks_1.RunSchematicTask('pluginTS', project), []);
        });
    }
    return schematics_1.chain(nextRules);
};
//# sourceMappingURL=index.js.map